// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/availability.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/X3nonxe/gopsy-backend/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAvailabilityRepository is a mock of AvailabilityRepository interface.
type MockAvailabilityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityRepositoryMockRecorder
}

// GetByPsikologID implements domain.AvailabilityRepository.
func (m *MockAvailabilityRepository) GetByPsikologID(ctx context.Context, psikologID uint) ([]domain.WaktuKonsultasi, error) {
	panic("unimplemented")
}

// GetByPsikologIDAndDay implements domain.AvailabilityRepository.
func (m *MockAvailabilityRepository) GetByPsikologIDAndDay(ctx context.Context, psikologID uint, day string) ([]domain.WaktuKonsultasi, error) {
	panic("unimplemented")
}

// MockAvailabilityRepositoryMockRecorder is the mock recorder for MockAvailabilityRepository.
type MockAvailabilityRepositoryMockRecorder struct {
	mock *MockAvailabilityRepository
}

// NewMockAvailabilityRepository creates a new mock instance.
func NewMockAvailabilityRepository(ctrl *gomock.Controller) *MockAvailabilityRepository {
	mock := &MockAvailabilityRepository{ctrl: ctrl}
	mock.recorder = &MockAvailabilityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityRepository) EXPECT() *MockAvailabilityRepositoryMockRecorder {
	return m.recorder
}

// ReplaceAll mocks base method.
func (m *MockAvailabilityRepository) ReplaceAll(ctx context.Context, psikologID uint, slots []domain.WaktuKonsultasi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAll", ctx, psikologID, slots)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceAll indicates an expected call of ReplaceAll.
func (mr *MockAvailabilityRepositoryMockRecorder) ReplaceAll(ctx, psikologID, slots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAll", reflect.TypeOf((*MockAvailabilityRepository)(nil).ReplaceAll), ctx, psikologID, slots)
}

// MockAvailabilityUsecase is a mock of AvailabilityUsecase interface.
type MockAvailabilityUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityUsecaseMockRecorder
}

// MockAvailabilityUsecaseMockRecorder is the mock recorder for MockAvailabilityUsecase.
type MockAvailabilityUsecaseMockRecorder struct {
	mock *MockAvailabilityUsecase
}

// NewMockAvailabilityUsecase creates a new mock instance.
func NewMockAvailabilityUsecase(ctrl *gomock.Controller) *MockAvailabilityUsecase {
	mock := &MockAvailabilityUsecase{ctrl: ctrl}
	mock.recorder = &MockAvailabilityUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityUsecase) EXPECT() *MockAvailabilityUsecaseMockRecorder {
	return m.recorder
}

// SetAvailability mocks base method.
func (m *MockAvailabilityUsecase) SetAvailability(ctx context.Context, psikologID uint, payload *domain.SetAvailabilityPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvailability", ctx, psikologID, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAvailability indicates an expected call of SetAvailability.
func (mr *MockAvailabilityUsecaseMockRecorder) SetAvailability(ctx, psikologID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvailability", reflect.TypeOf((*MockAvailabilityUsecase)(nil).SetAvailability), ctx, psikologID, payload)
}
